==============================================================================
------------------------------------------------------------------------------
                                                           *TexLab* *texlab-tools*
TEXLAB TOOLS
============

The texlab-tools plugin creates functionality around the texlab language server.
The plugin does nothing without being set up.
To set up the plugin, call |TexLab.setup()| with your prefered options.


REQUIREMENTS

- [texlab](https://github.com/latex-lsp/texlab) language server installed (at least v5.7.0)
- [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)
- [telescope.nvim](https://github.com/nvim-telescope/telescope.nvim)
  and [plenary.nvim](https://github.com/nvim-lua/plenary.nvim) (optional for toc)


------------------------------------------------------------------------------
                                                                *TexLab.setup()*
                             `TexLab.setup`({opts})
Setup the texlab-tools plugin
See |TexLab.configuration.example| for an example config.

Parameters~
{opts} `(table)` | nil Important keys:

 - `snippet` string|table: The application to use for snippet insertion.
   Available options: "snippy", "vsnip", "luasnip", "ultisnips"

 - `viewer` string|nil: The application to use for pdf viewing.
   For now only "zathura" and "okular" are supported.

 - `builder` (string)|nil: The application to use for building. (default: "latexmk")
   For now only "latexmk" is supported.

 - `mappings` table|nil: Mappings that are added once TexLab attaches to a buffer.
   See |TexLab.mappings()| for more info.

 - `texlab_opts` table|false|nil: Additional options that are passed to the texlab language server.
   If false, the server is not started. An existing server can be used if it is set up.

------------------------------------------------------------------------------
                                                       *TexLab.example_config()*
                           `TexLab.example_config`()
Get the example config. See |TexLab.configuration.example|.

------------------------------------------------------------------------------
                                            *TexLab.setup.with_example_config()*
                   `TexLab.setup.with_example_config`({opts})
Setup the texlab-tools plugin with the exact example config from |TexLab.configuration.example|.
If you want to customize it is recommended to copy/paste the example config and change it.

Parameters~
{opts} `(table)` | nil See |TexLab.setup()|.
! The behaviour of this function is subject to change.


==============================================================================
------------------------------------------------------------------------------
                                                          *TexLab.configuration*
EXAMPLE CONGIFURATION
To try this config call
>lua
 TexLab.setup.with_example_config({
   -- no_example_warning = true,
   snippet = { app = "snippy" },
   viewer = { app = "zathura" },
   builder = { app = "latexmk" },
 })
<
in your `init.lua`. This will setup the keybindings from the example config.
If you want to try from vimscript, use `lua require("texlab-tools").setup.with_example_config`().
>lua
  local tex = require("texlab-tools")

  tex.setup({
    -- To use snippets, set either `snippet` or `snippet.expand`.
    -- snippet = "vsnip", -- "snippy", "luasnip", "vsnip", "ultisnips"
    -- snippet = {
    --   expand = function(body) vim.fn["vsnip#anonymous"](body) end,
    --   -- Optional:
    --   cut_text = function()
    --     vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<Plug>(vsnip-cut-text)',true,false,true),"x",false)
    --   end,
    --   cut_text_placeholder = function() return "${TM_SELECTED_TEXT}" end,
    -- },

    -- viewer = "zathura", -- "zathura", "okular"

    builder = {
      "latexmk",
      on_save = true,
      forward_search_after = false,
    },

    -- For some possible functions see |TexLab.action| and |TexLab.snippet|.
    mappings = tex.Keymap:new({
      { mode = {"n", "i"} },
      -- table with: ["(input keys)"] = (action)
      ["<F5>"] = { tex.action.build(), desc = "[TexLab] Build the current tex file"},
      ["<F6>"] = { tex.action.forward_search(), desc = "[TexLab] Forward search in pdf" },
      ["<A-t>"] = { tex.action.open_toc({ of = "document" }), desc="[TexLab] Show section list" },
      ["<A-a>"] = { tex.action.map_environment_names({
        map = {
          ["equation"] = "align",
          ["equation*"] = "align*",
          ["align*"] = "equation*",
          ["align"] = "equation",
        },
        strategy = "first-match",
      }), desc = "[TexLab] Toggle between align and equation" },
      ["<A-s>"] = { tex.action.toggle_environment_star({
        only = { "equation", "align" },
        strategy = "first-match",
      }), desc = "[TexLab] Add * to closest equation or align" },
    }, {
      { mode = {"i", "n"} }, -- Set mode to apply to all mappings in this table.
      ["<A-e>"] = { tex.snippet.environment("equation*"), desc = "[TexLab] Insert equation* environment" },
      ["<A-b>"] = { tex.snippet.begin_end(), desc = "[TexLab] Insert new environent" },
    },
    {
      { mode = "v" }, -- Only visual mode
      -- For now, these only work with vsnip.
      ["<A-e>"] = { tex.snippet.surround_selection("equation*"), desc = "[TexLab] Surround selection with equation*"},
      ["<A-b>"] = { tex.snippet.surround_selection(), desc = "[TexLab] Surround selection with environment" },
    }):set({ silent = true }),
  })
<

------------------------------------------------------------------------------
Using only the default mappings and custom ones
>lua
 TexLab.setup({
   -- ...
   mappings = TexLab.example_config().mappings:extend({
        -- Add your own mappings here
   })
 })
<


==============================================================================
------------------------------------------------------------------------------
                                                           *TexLab.Keymap:new()*
                           `TexLab.Keymap:new`({...})
Create a new keymap.
Parameters~
{...} `(table)` A list of different keymaps.
A keymap takes the following form:
>
  {
    { mode = <mode>, <def-opts> }, -- This is optional
    ["<lhs>"] = <rhs>,
    ["<lhs>"] = {<rhs>, <opts>},
    -- ...
  }
<
where:
- <mode>: string | table is a string or list of strings (e.g. "n" or {"n", "v"}). This is the first argument to |vim.keymap.set|.
- <def-opts>: table is a table of options that will be used for all mappings. This is the 4-th argument to |vim.keymap.set|.
- <lhs>: string is the left-hand side of the mapping. This is the 2-nd argument to |vim.keymap.set|.
- <rhs>: function | string is the right-hand side of the mapping. This is the 3-rd argument to |vim.keymap.set|.
- <opts>: table is a table of options that will be used for this mapping. Overrides any options including the mode.
Return~
`(table)` The new keymap.

------------------------------------------------------------------------------
                                                        *TexLab.Keymap:extend()*
                         `TexLab.Keymap:extend`({...})
Extend a keymap.
Parameters~
{...} `(table)` A list of different keymaps.
See `TexLab.Keymap:new` for the format of the keymaps.
Return~
`(table)` The extended keymap.

------------------------------------------------------------------------------
                                                           *TexLab.Keymap:set()*
                          `TexLab.Keymap:set`({opts})
Set options for a keymap.
Parameters~
{opts} `(table)` Overrides mode or options of all mappings in the keymap.
The map is modified in-place.
Example: `keymap:set({silent = true})`
Return~
`(table)` The modified keymap

------------------------------------------------------------------------------
                                                         *TexLab.Keymap:apply()*
                         `TexLab.Keymap:apply`({opts})
Apply the keymap using |vim.keymap.set|.
Parameters~
{opts} `(table)` Overrides mode or options of all mappings in the keymap.
Example: `keymap:apply({buffer = 0})`


==============================================================================
------------------------------------------------------------------------------
                                                                *TexLab.snippet*
SNIPPETS

Snippets are small pieces of code that can be inserted into the document.
To use snippets the `snippet` option must be set in |TexLab.setup()|.

Setting up a custom snippet engine is possible by setting `snippet` to a table with:
>
snippet = {
  expand = function(body) ... end,
  -- Optional values:
  cut_text = function() ... end, -- cuts the currently selected text
  cut_text_placeholder = function() ... end, -- returns placeholder for cut text
}
<
For vsnip one can execute the mapping "<Plug>(vsnip-cut-text)"
and use "${TM_SELECTED_TEXT}" as cut_text_placeholder.

An example with snippet engine `vsnip` and mapping `<A-e>` to the snippet `equation` is:
>lua
 local tex = require("texlab-tools")
 tex.setup({
   snippet = "vsnip",
   -- ...,
   mappings = tex.Keymap:new({
     { mode = {"n", "i"} }, -- mappings in normal and insert mode
     ["<A-e>"] = tex.snippet.environment("equation"),
     -- ...
   }),
 })
<

Any function in this module can be used as in the above example.
However, some may require additional arguments. For example:
>lua
tex.snippet.environment("test", "Test: $0")
<
creates a snippet that expands to:
>tex
\begin{test}
    Test: |
\end{test}
<

------------------------------------------------------------------------------
                                                  *TexLab.snippet.new_snippet()*
                      `TexLab.snippet.new_snippet`({body})
Create a new snippet.
Parameters~
{body} `(string)` The body of the snippet in lsp snippet format.
`TexLab.snippet.new_snippet("\\label{eq:$1}")` is a snippet for:
>tex
 \label{eq:|}
<

------------------------------------------------------------------------------
                                                  *TexLab.snippet.environment()*
                  `TexLab.snippet.environment`({name}, {body})
Snippet that inserts an environment.
Parameters~
{name} `(string)` The name of the environment.
{body} `(string)` | nil The body of the environment. Defaults to "\t$0".
>
\begin{<name>}
    <body>
\end{<name>}
<

------------------------------------------------------------------------------
                                                    *TexLab.snippet.begin_end()*
                       `TexLab.snippet.begin_end`({body})
Snippet that inserts an environment. This snippet has a placeholder for the environment name.
@param body string | nil The body of the environment. See |TexLab.snippet.environment()|.

------------------------------------------------------------------------------
                                                     *TexLab.snippet.equation()*
                       `TexLab.snippet.equation`({body})
Snippet that inserts an `equation` environment.
@param body string | nil The body of the environment. See |TexLab.snippet.environment()|.

------------------------------------------------------------------------------
                                                    *TexLab.snippet.enumerate()*
                       `TexLab.snippet.enumerate`({body})
Snippet inserts an `enumerate` environment.
@param body string | nil The body of the environment. Defaults to "\t\\item $0" See |TexLab.snippet.environment()|.

------------------------------------------------------------------------------
                                                      *TexLab.snippet.itemize()*
                        `TexLab.snippet.itemize`({body})
Snippet inserts an `itemize` environment.
@param body string | nil The body of the environment. Defaults to "\t\\item $0"

------------------------------------------------------------------------------
                                           *TexLab.snippet.surround_selection()*
                  `TexLab.snippet.surround_selection`({name})
Snippet that surrounds the current selection with an environment.
(Only works with vsnip when using the default snippet engines.)
This snippet requires the cut_text and cut_text_placeholder functions to be set in the config.
@param name string | nil The name of the environment. (Defaults to "$1").


==============================================================================
------------------------------------------------------------------------------
                                                                 *TexLab.action*
                                `TexLab.action`
There are different actions that can be performed.
An example, that maps `<F5>` to build and `<F6>` to forward search is:
>lua
 local tex = require("texlab-tools")
 tex.setup({
   mappings = tex.Keymap:new({
     ["<F5>"] = tex.action.build(),
     ["<F6>"] = tex.action.forward_search(),
   }),
 })
<
To make the mapping available in insert mode use `tex.Keymap:new({{ mode = "i" }, ...})`.
TexLab.Keymap

------------------------------------------------------------------------------
                                                         *TexLab.action.build()*
                            `TexLab.action.build`()
Starts a build.

------------------------------------------------------------------------------
                                                *TexLab.action.forward_search()*
                        `TexLab.action.forward_search`()
Performs a forward search. (This has to be configured in the texlab server)

------------------------------------------------------------------------------
                                                      *TexLab.action.open_toc()*
                        `TexLab.action.open_toc`({opts})
Opens the table of contents in a telescope picker.
Parameters~
{opts} `(table)` Keys:
- `from`: "document" or "workspace" (default: "document")
  Controls whether to show the symbols from the current document or from the entire workspace.

------------------------------------------------------------------------------
                                         *TexLab.action.map_environment_names()*
                 `TexLab.action.map_environment_names`({opts})
Modify environment names around the cursor.
Parameters~
{opts} `(table)` Keys:
- `map`: (function(name):name)|table Function that maps the old name to the new name. (required)
- `filter`: (function(name):boolean)|nil Function to filter the environments. (default: nil)
- `strategy`: "first"|"first-match" (default: "first")

------------------------------------------------------------------------------
                                       *TexLab.action.toggle_environment_star()*
                `TexLab.action.toggle_environment_star`({opts})
Modify the star on an environment.
Parameters~
{opts} `(table|nil)` Keys:
- 'only': table|nil List of environments to modify. (default: nil)
- 'except': table|nil List of environments to not modify. (default: nil)
- 'strategy': "first"|"first-match" (default: "first")
Only set one of `only` or `except`.


 vim:tw=78:ts=8:noet:ft=help:norl: